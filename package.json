{
  "name": "stylex",
  "displayName": "StyleX Intellisense",
  "description": "Intellisense for StyleX inside Visual Studio Code",
  "author": "Yash Singh",
  "license": "MIT",
  "version": "0.0.2",
  "icon": "assets/stylexlogo.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/Yash-Singh1/stylex-vscode"
  },
  "publisher": "yash-singh",
  "categories": [],
  "keywords": [
    "multi-root ready",
    "lsp",
    "language-server",
    "stylex"
  ],
  "engines": {
    "vscode": "^1.75.0"
  },
  "activationEvents": [
    "onLanguage:javascript",
    "onLanguage:typescript",
    "onLanguage:javascriptreact",
    "onLanguage:typescriptreact",
    "onStartupFinished"
  ],
  "main": "./client/out/extension",
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "StyleX Intellisense",
      "properties": {
        "stylex.includedLanguages": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "markdownDescription": "Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.\n E.g.: `{\"plaintext\": \"javascriptreact\"}`"
        },
        "stylex.aliasModuleNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "markdownDescription": "List of custom module names that should be considered as the StyleX package for detecting StyleX workspaces and imports. Default is just `[\"@stylexjs/stylex\"]`."
        },
        "stylex.trace.server": {
          "scope": "window",
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the language server."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile:client": "cd client/; tsup; cd ..",
    "compile:server": "tsup server/src/server.ts --no-splitting --out-dir server/out",
    "compile": "concurrently \"npm run compile:client\" \"npm run compile:server\"",
    "watch": "concurrently \"tsc -w -p ./client\" \"tsup server/src/server.ts --no-splitting --out-dir server/out --watch --ignore-watch client\"",
    "lint": "eslint ./client/src ./server/src --ext .ts,.tsx && prettier --check \"**/*.{ts,tsx,js,json,md}\"",
    "postinstall": "cd client && npm install && cd ../server && npm install && cd ..",
    "test": "sh ./scripts/e2e.sh",
    "type-check": "tsc --noEmit",
    "code-style": "prettier --write \"**/*.{ts,tsx,js,json,md}\""
  },
  "devDependencies": {
    "@swc/wasm-web": "^1.3.102",
    "@types/mocha": "^10.0.6",
    "@types/node": "^18.14.6",
    "@typescript-eslint/eslint-plugin": "^6.14.0",
    "@typescript-eslint/parser": "^6.14.0",
    "concurrently": "^8.2.2",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "mkdirp": "^3.0.1",
    "mocha": "^10.2.0",
    "nodemon": "^3.0.2",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "prettier": "^3.1.1",
    "tsup": "^8.0.1"
  }
}
